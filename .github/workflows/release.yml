name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.3.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: true
        type: boolean
        default: false

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
     - uses: actions/checkout@v4

     - name: Set up Python ${{ matrix.python-version }}
       uses: actions/setup-python@v5
       with:
         python-version: ${{ matrix.python-version }}

     - name: Install Poetry
       run: pip install poetry

     - name: Configure Poetry
       run: |
         poetry config virtualenvs.create true
         poetry config virtualenvs.in-project true

     - name: Load cached venv
       id: cached-poetry-dependencies
       uses: actions/cache@v4
       with:
         path: .venv
         key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

     - name: Install dependencies
       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
       run: |
         poetry install --with dev --no-interaction
         poetry show
         pip list
         python -c "import sys; print('Python path:', sys.path)"

     - name: Verify dependencies installation
       run: |
         poetry --version
         poetry show
         pip list
         which python
         which pip
         poetry run pip list
         poetry run python -c "import sys; print('Python executable:', sys.executable); print('Python path:', sys.path)"
         poetry run python -c "import pytest; print(f'pytest version: {pytest.__version__}')"

     - name: Run tests
       run: |
         poetry run pytest tests/ -v --tb=short

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      run: pip install poetry

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: poetry install --with dev --no-interaction

    - name: Build package
      run: poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/p/pyside6-cutewindow
    permissions:
      id-token: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Debug - Check dist contents
      run: |
        echo "=== Distribution files ==="
        ls -la dist/
        echo "=== Checking package names ==="
        find dist/ -name "*.whl" -o -name "*.tar.gz" | head -5

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        password: ${{ secrets.PYPI_API_TOKEN }}

  create-release:
    needs: [build, publish-pypi]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Set version from tag or input
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"beta"* ]] || [[ "$VERSION" == *"rc"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for this version
        python -c "
        import re
        import sys

        version = '${{ steps.version.outputs.version }}'
        changelog_file = 'CHANGELOG.md'

        with open(changelog_file, 'r') as f:
            content = f.read()

        # Find the section for this version
        pattern = rf'## \[{re.escape(version)}\] - .*?\n(.*?)(?=\n## \[|$)'
        match = re.search(pattern, content, re.DOTALL)

        if match:
            changelog = match.group(1).strip()
            # Remove the '### Added/Changed/etc.' headers for cleaner release notes
            changelog = re.sub(r'^### ', '', changelog, flags=re.MULTILINE)
            print(changelog)
        else:
            print(f'No changelog found for version {version}')
        " > changelog.txt

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ steps.version.outputs.is_prerelease }}
        files: dist/*
        generate_release_notes: true

    - name: Update version in pyproject.toml for manual releases
      if: github.event_name == 'workflow_dispatch'
      run: |
        # This step would update the version in pyproject.toml for manual releases
        # You might want to commit this change back to the repository
        echo "Manual release triggered for version ${{ steps.version.outputs.version }}"
