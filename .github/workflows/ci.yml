name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: pip install poetry

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Show Poetry environment info
      run: |
        poetry --version
        poetry env info

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction

    - name: Install project
      run: poetry install --no-interaction

    - name: Run code formatting check
      run: |
        poetry run black --check .
        poetry run isort --check-only .
      continue-on-error: true

    - name: Show formatting fix commands
      if: failure()
      run: |
        echo "⚠️  Code formatting issues found!"
        echo "To fix these issues locally, run:"
        echo "  poetry run black ."
        echo "  poetry run isort ."
        echo ""
        echo "Or use the convenience script:"
        echo "  ./format-code.sh"

    - name: Run linting
      run: |
        poetry run which flake8 || echo "flake8 not found in PATH"
        poetry run flake8 . --exclude=venv,.venv,build,dist --ignore=E501,W191,E101,E266,F401,W503
      continue-on-error: true

    - name: Run type checking
      run: |
        poetry run mypy . || true

    - name: Run tests
      run: |
        poetry run pytest tests/ -v --tb=short || true

    - name: Build package
      run: |
        poetry build

    - name: Test installation
      run: |
        poetry run pip install dist/*.whl || poetry run pip install $(ls dist/*.whl | head -1)
        poetry run python -c "import cutewindow; print('CuteWindow imported successfully')"

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      run: pip install poetry

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Build package
      run: poetry build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
